


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       II
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                         (c) Copyright 2009-2015; Micri
                       um, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       4 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V3.04.05
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7 Cortex-M4
   18 00000000         ; Mode      : Thumb-2 ISA
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         
   30 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   31 00000000                 IMPORT           OSPrioCur
   32 00000000                 IMPORT           OSPrioHighRdy
   33 00000000                 IMPORT           OSTCBCurPtr
   34 00000000                 IMPORT           OSTCBHighRdyPtr
   35 00000000                 IMPORT           OSIntExit
   36 00000000                 IMPORT           OSTaskSwHook
   37 00000000                 IMPORT           OS_CPU_ExceptStkBase
   38 00000000         
   39 00000000         
   40 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   41 00000000                 EXPORT           OSCtxSw
   42 00000000                 EXPORT           OSIntCtxSw
   43 00000000                 EXPORT           OS_CPU_PendSVHandler
   44 00000000         
   45 00000000                 IF               {FPU} != "SoftVFP"
   46 00000000                 EXPORT           OS_CPU_FP_Reg_Push



ARM Macro Assembler    Page 2 


   47 00000000                 EXPORT           OS_CPU_FP_Reg_Pop
   48 00000000                 ENDIF
   49 00000000         
   50 00000000         
   51 00000000         ;*******************************************************
                       *************************************************
   52 00000000         ;                                               EQUATES
   53 00000000         ;*******************************************************
                       *************************************************
   54 00000000         
   55 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   56 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   57 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   58 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   59 00000000         
   60 00000000         
   61 00000000         ;*******************************************************
                       *************************************************
   62 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   63 00000000         ;*******************************************************
                       *************************************************
   64 00000000         
   65 00000000                 PRESERVE8
   66 00000000                 THUMB
   67 00000000         
   68 00000000                 AREA             CODE, CODE, READONLY
   69 00000000         
   70 00000000         
   71 00000000         ;*******************************************************
                       *************************************************
   72 00000000         ;                                   FLOATING POINT REGIS
                       TERS PUSH
   73 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       CPU_STK  *stkPtr)
   74 00000000         ;
   75 00000000         ; Note(s) : 1) This function saves S0-S31, and FPSCR reg
                       isters of the Floating Point Unit.
   76 00000000         ;
   77 00000000         ;           2) Pseudo-code is:
   78 00000000         ;              a) Get FPSCR register value;
   79 00000000         ;              b) Push value on process stack;
   80 00000000         ;              c) Push remaining regs S0-S31 on process 
                       stack;
   81 00000000         ;              d) Update OSTCBCurPtr->StkPtr;
   82 00000000         ;*******************************************************



ARM Macro Assembler    Page 3 


                       *************************************************
   83 00000000         
   84 00000000                 IF               {FPU} != "SoftVFP"
   85 00000000         
   86 00000000         OS_CPU_FP_Reg_Push
   87 00000000 F3EF 8109       MRS              R1, PSP     ; PSP is process st
                                                            ack pointer
   88 00000004 B141            CBZ              R1, OS_CPU_FP_nosave ; Skip FP 
                                                            register save the f
                                                            irst time
   89 00000006         
   90 00000006 EEF1 1A10       VMRS             R1, FPSCR
   91 0000000A F840 1D04       STR              R1, [R0, #-4]!
   92 0000000E ED20 0A20       VSTMDB           R0!, {S0-S31}
   93 00000012 4928            LDR              R1, =OSTCBCurPtr
   94 00000014 680A            LDR              R2, [R1]
   95 00000016 6010            STR              R0, [R2]
   96 00000018         OS_CPU_FP_nosave
   97 00000018 4770            BX               LR
   98 0000001A         
   99 0000001A                 ENDIF
  100 0000001A         
  101 0000001A         
  102 0000001A         ;*******************************************************
                       *************************************************
  103 0000001A         ;                                   FLOATING POINT REGIS
                       TERS POP
  104 0000001A         ;                             void  OS_CPU_FP_Reg_Pop (C
                       PU_STK  *stkPtr)
  105 0000001A         ;
  106 0000001A         ; Note(s) : 1) This function restores S0-S31, and FPSCR 
                       registers of the Floating Point Unit.
  107 0000001A         ;
  108 0000001A         ;           2) Pseudo-code is:
  109 0000001A         ;              a) Restore regs S0-S31 of new process sta
                       ck;
  110 0000001A         ;              b) Restore FPSCR reg value
  111 0000001A         ;              c) Update OSTCBHighRdyPtr->StkPtr pointer
                        of new proces stack;
  112 0000001A         ;*******************************************************
                       *************************************************
  113 0000001A         
  114 0000001A                 IF               {FPU} != "SoftVFP"
  115 0000001A         
  116 0000001A         OS_CPU_FP_Reg_Pop
  117 0000001A ECB0 0A20       VLDMIA           R0!, {S0-S31}
  118 0000001E C802            LDMIA            R0!, {R1}
  119 00000020 EEE1 1A10       VMSR             FPSCR, R1
  120 00000024 4924            LDR              R1, =OSTCBHighRdyPtr
  121 00000026 680A            LDR              R2, [R1]
  122 00000028 6010            STR              R0, [R2]
  123 0000002A 4770            BX               LR
  124 0000002C         
  125 0000002C                 ENDIF
  126 0000002C         
  127 0000002C         
  128 0000002C         ;*******************************************************
                       *************************************************
  129 0000002C         ;                                         START MULTITAS



ARM Macro Assembler    Page 4 


                       KING
  130 0000002C         ;                                      void OSStartHighR
                       dy(void)
  131 0000002C         ;
  132 0000002C         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  133 0000002C         ;              the first task to start.
  134 0000002C         ;
  135 0000002C         ;           2) OSStartHighRdy() MUST:
  136 0000002C         ;              a) Setup PendSV exception priority to low
                       est;
  137 0000002C         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  138 0000002C         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  139 0000002C         ;              d) Trigger PendSV exception;
  140 0000002C         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  141 0000002C         ;*******************************************************
                       *************************************************
  142 0000002C         
  143 0000002C         OSStartHighRdy
  144 0000002C 4823            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  145 0000002E F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  146 00000032 7001            STRB             R1, [R0]
  147 00000034         
  148 00000034 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  149 00000036 F380 8809       MSR              PSP, R0
  150 0000003A         
  151 0000003A 4821            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  152 0000003C 6801            LDR              R1, [R0]
  153 0000003E F381 8808       MSR              MSP, R1
  154 00000042         
  155 00000042 4820            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  156 00000044 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  157 00000048 6001            STR              R1, [R0]
  158 0000004A         
  159 0000004A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  160 0000004C         
  161 0000004C         OSStartHang
  162 0000004C E7FE            B                OSStartHang ; Should never get 
                                                            here
  163 0000004E         ;CPSID   I                                              
                            ; Prevent interruption during context switch
  164 0000004E         ;MOV32   R0, NVIC_SYSPRI14                              
                            ; Set the PendSV exception priority
  165 0000004E         ;MOV32   R1, NVIC_PENDSV_PRI



ARM Macro Assembler    Page 5 


  166 0000004E         ;STRB    R1, [R0]
  167 0000004E         
  168 0000004E         ;MOV     R0, #0
  169 0000004E         ;MSR     PSP, R0
  170 0000004E         ;BL      OSTaskSwHook                                   
                            ; Call OSTaskSwHook for FPU Pop
  171 0000004E         
  172 0000004E         ;MOV32   R0, OS_CPU_ExceptStkBase                       
                            ; Initialize the MSP to the OS_CPU_ExceptStkBase
  173 0000004E         ;LDR     R1, [R0]
  174 0000004E         ;MSR     MSP, R1
  175 0000004E         
  176 0000004E         ;MOV32   R0, OSPrioCur                                  
                            ; OSPrioCur   = OSPrioHighRdy;
  177 0000004E         ;MOV32   R1, OSPrioHighRdy
  178 0000004E         ;LDRB    R2, [R1]
  179 0000004E         ;STRB    R2, [R0]
  180 0000004E         
  181 0000004E         ;MOV32   R5, OSTCBCurPtr
  182 0000004E         ;MOV32   R1, OSTCBHighRdyPtr                            
                            ; OSTCBCurPtr = OSTCBHighRdyPtr;
  183 0000004E         ;LDR     R2, [R1]
  184 0000004E         ;STR     R2, [R5]
  185 0000004E         
  186 0000004E         ;LDR     R0, [R2]                                       
                            ; R0 is new process SP; SP = OSTCBHighRdyPtr->StkPt
                       r;
  187 0000004E         ;MSR     PSP, R0                                        
                            ; Load PSP with new process SP
  188 0000004E         
  189 0000004E         ;MRS     R0, CONTROL
  190 0000004E         ;ORR     R0, R0, #2
  191 0000004E         ;MSR     CONTROL, R0
  192 0000004E         ;ISB                                                    
                            ; Sync instruction stream
  193 0000004E         
  194 0000004E         ;LDMFD    SP!, {R4-R11}                                 
                            ; Restore r4-11 from new process stack
  195 0000004E         ;LDMFD    SP!, {R0-R3}                                  
                            ; Restore r0, r3
  196 0000004E         ;LDMFD    SP!, {R12, LR}                                
                            ; Load R12 and LR
  197 0000004E         ;LDMFD    SP!, {R1, R2}                                 
                            ; Load PC and discard xPSR
  198 0000004E         ;CPSIE    I
  199 0000004E         ;BX       R1
  200 0000004E         
  201 0000004E         
  202 0000004E         ;*******************************************************
                       *************************************************
  203 0000004E         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  204 0000004E         ;
  205 0000004E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  206 0000004E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  207 0000004E         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 6 


  208 0000004E         
  209 0000004E         OSCtxSw
  210 0000004E 481D            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  211 00000050 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  212 00000054 6001            STR              R1, [R0]
  213 00000056 4770            BX               LR
  214 00000058         
  215 00000058         
  216 00000058         ;*******************************************************
                       *************************************************
  217 00000058         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  218 00000058         ;
  219 00000058         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  220 00000058         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  221 00000058         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  222 00000058         ;*******************************************************
                       *************************************************
  223 00000058         
  224 00000058         OSIntCtxSw
  225 00000058 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  226 0000005A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  227 0000005E 6001            STR              R1, [R0]
  228 00000060 4770            BX               LR
  229 00000062         
  230 00000062         
  231 00000062         ;*******************************************************
                       *************************************************
  232 00000062         ;                                       HANDLE PendSV EX
                       CEPTION
  233 00000062         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  234 00000062         ;
  235 00000062         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  236 00000062         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  237 00000062         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  238 00000062         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  239 00000062         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  240 00000062         ;              a thread or occurs due to an interrupt or
                        exception.
  241 00000062         ;
  242 00000062         ;           2) Pseudo-code is:
  243 00000062         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  244 00000062         ;              b) Save remaining regs r4-r11 on process 



ARM Macro Assembler    Page 7 


                       stack;
  245 00000062         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  246 00000062         ;              d) Call OSTaskSwHook();
  247 00000062         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  248 00000062         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  249 00000062         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  250 00000062         ;              h) Restore R4-R11 from new process stack;
                       
  251 00000062         ;              i) Perform exception return which will re
                       store remaining context.
  252 00000062         ;
  253 00000062         ;           3) On entry into PendSV handler:
  254 00000062         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  255 00000062         ;                 xPSR, PC, LR, R12, R0-R3
  256 00000062         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  257 00000062         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  258 00000062         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  259 00000062         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  260 00000062         ;
  261 00000062         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  262 00000062         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  263 00000062         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  264 00000062         ;*******************************************************
                       *************************************************
  265 00000062         
  266 00000062         ;OS_CPU_PendSVHandler
  267 00000062         ;CPSID   I                                              
                            ; Prevent interruption during context switch
  268 00000062         ;MRS     R0, PSP                                        
                            ; PSP is process stack pointer
  269 00000062         ;STMFD   R0!, {R4-R11}                                  
                            ; Save remaining regs r4-11 on process stack
  270 00000062         
  271 00000062         ;MOV32   R5, OSTCBCurPtr                                
                            ; OSTCBCurPtr->OSTCBStkPtr = SP;
  272 00000062         ;LDR     R6, [R5]
  273 00000062         ;STR     R0, [R6]                                       
                            ; R0 is SP of process being switched out
  274 00000062         
  275 00000062         ;; At this point, entire context of process has been sav
                       ed
  276 00000062         ;MOV     R4, LR                                         
                            ; Save LR exc_return value
  277 00000062         ;BL      OSTaskSwHook                                   
                            ; OSTaskSwHook();
  278 00000062         
  279 00000062         ;MOV32   R0, OSPrioCur                                  



ARM Macro Assembler    Page 8 


                            ; OSPrioCur   = OSPrioHighRdy;
  280 00000062         ;MOV32   R1, OSPrioHighRdy
  281 00000062         ;LDRB    R2, [R1]
  282 00000062         ;STRB    R2, [R0]
  283 00000062         
  284 00000062         ;MOV32   R1, OSTCBHighRdyPtr                            
                            ; OSTCBCurPtr = OSTCBHighRdyPtr;
  285 00000062         ;LDR     R2, [R1]
  286 00000062         ;STR     R2, [R5]
  287 00000062         
  288 00000062         ;ORR     LR, R4, #0xF4                                  
                            ; Ensure exception return uses process stack
  289 00000062         ;LDR     R0, [R2]                                       
                            ; R0 is new process SP; SP = OSTCBHighRdyPtr->StkPt
                       r;
  290 00000062         ;LDMFD   R0!, {R4-R11}                                  
                            ; Restore r4-11 from new process stack
  291 00000062         ;MSR     PSP, R0                                        
                            ; Load PSP with new process SP
  292 00000062         ;CPSIE   I
  293 00000062         ;BX      LR                                             
                            ; Exception return will restore remaining context
  294 00000062         
  295 00000062         ;ALIGN
  296 00000062         
  297 00000062         ;END
  298 00000062         OS_CPU_PendSVHandler
  299 00000062 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  300 00000064 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  301 00000068 B150            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  302 0000006A         
  303 0000006A F01E 0F10       TST              LR, #0X10
  304 0000006E BF08            IT               EQ
  305 00000070 ED20 8A10       VSTMDBEQ         R0!, {S16-S31}
  306 00000074         
  307 00000074 4673            MOV              R3,LR
  308 00000076 E920 0FF8       STMDB            R0!,{R3-R11}
  309 0000007A         
  310 0000007A         ;SUBS    R0, R0, #0x20                                  
                            ; Save remaining regs r4-11 on process stack
  311 0000007A         ;TM     R0, {R4-R11}
  312 0000007A         
  313 0000007A 490E            LDR              R1, =OSTCBCurPtr ; OSTCBCurPtr-
                                                            >OSTCBStkPtr = SP;
  314 0000007C 6809            LDR              R1, [R1]
  315 0000007E 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  316 00000080         
  317 00000080         ; At this point, entire context of process has been save
                       d
  318 00000080         OS_CPU_PendSVHandler_nosave
  319 00000080 B500            PUSH             {R14}       ; Save LR exc_retur



ARM Macro Assembler    Page 9 


                                                            n value
  320 00000082 4811            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  321 00000084 4780            BLX              R0
  322 00000086 F85D EB04       POP              {R14}
  323 0000008A         
  324 0000008A 4810            LDR              R0, =OSPrioCur ; OSPrioCur   = 
                                                            OSPrioHighRdy;
  325 0000008C 4910            LDR              R1, =OSPrioHighRdy
  326 0000008E 780A            LDRB             R2, [R1]
  327 00000090 7002            STRB             R2, [R0]
  328 00000092         
  329 00000092 4808            LDR              R0, =OSTCBCurPtr ; OSTCBCurPtr 
                                                            = OSTCBHighRdyPtr;
  330 00000094 4908            LDR              R1, =OSTCBHighRdyPtr
  331 00000096 680A            LDR              R2, [R1]
  332 00000098 6002            STR              R2, [R0]
  333 0000009A 6810            LDR              R0, [R2]
  334 0000009C         
  335 0000009C E8B0 0FF8       LDMIA            R0!,{R3-R11}
  336 000000A0 469E            MOV              LR, R3
  337 000000A2         
  338 000000A2 F01E 0F10       TST              LR, #0x10
  339 000000A6 BF08            IT               EQ
  340 000000A8 ECB0 8A10       VLDMIAEQ         R0!, {S16-S31}
  341 000000AC         
  342 000000AC         
  343 000000AC         ;LDR     R0, [R2]                                       
                            ; R0 is new process SP; SP = OSTCBHighRdyPtr->StkPt
                       r;
  344 000000AC         ;LDM     R0, {R4-R11}                                   
                            ; Restore r4-11 from new process stack
  345 000000AC         ;ADDS    R0, R0, #0x20
  346 000000AC F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  347 000000B0         ;ORR     LR, LR, #0xF4                                  
                            ; Ensure exception return uses process stack
  348 000000B0 B662            CPSIE            I
  349 000000B2 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  350 000000B4         
  351 000000B4                 END
              00000000 
              00000000 
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -IF:\dropbox\Dropbo
x\uav330\software\flightboard\superQ_v2.0\Prj\RTE -IC:\Keil_v5\ARM\PACK\Keil\ST
M32F4xx_DFP\1.0.6\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__
MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 516" --predefine="STM32F40
_41xxx SETA 1" --list=.\listings\os_cpu_a.lst ..\uCOS\uCOS-III\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 68 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      None
Comment: CODE unused
OSCtxSw 0000004E

Symbol: OSCtxSw
   Definitions
      At line 209 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 41 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000058

Symbol: OSIntCtxSw
   Definitions
      At line 224 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 42 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000004C

Symbol: OSStartHang
   Definitions
      At line 161 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 162 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000002C

Symbol: OSStartHighRdy
   Definitions
      At line 143 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 40 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_FP_Reg_Pop 0000001A

Symbol: OS_CPU_FP_Reg_Pop
   Definitions
      At line 116 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 47 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OS_CPU_FP_Reg_Pop used once
OS_CPU_FP_Reg_Push 00000000

Symbol: OS_CPU_FP_Reg_Push
   Definitions
      At line 86 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 46 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OS_CPU_FP_Reg_Push used once
OS_CPU_FP_nosave 00000018

Symbol: OS_CPU_FP_nosave



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 96 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 88 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OS_CPU_FP_nosave used once
OS_CPU_PendSVHandler 00000062

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 298 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 43 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 00000080

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 318 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 301 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 55 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 155 in file ..\uCOS\uCOS-III\os_cpu_a.asm
      At line 210 in file ..\uCOS\uCOS-III\os_cpu_a.asm
      At line 225 in file ..\uCOS\uCOS-III\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 58 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 156 in file ..\uCOS\uCOS-III\os_cpu_a.asm
      At line 211 in file ..\uCOS\uCOS-III\os_cpu_a.asm
      At line 226 in file ..\uCOS\uCOS-III\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 57 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 145 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 56 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 144 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 35 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 324 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 325 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      None
Comment: OSRunning unused
OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 33 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 93 in file ..\uCOS\uCOS-III\os_cpu_a.asm
      At line 313 in file ..\uCOS\uCOS-III\os_cpu_a.asm
      At line 329 in file ..\uCOS\uCOS-III\os_cpu_a.asm

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 34 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 120 in file ..\uCOS\uCOS-III\os_cpu_a.asm
      At line 330 in file ..\uCOS\uCOS-III\os_cpu_a.asm

OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 36 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 320 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OSTaskSwHook used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 37 in file ..\uCOS\uCOS-III\os_cpu_a.asm
   Uses
      At line 151 in file ..\uCOS\uCOS-III\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
358 symbols in table
